(window.webpackJsonp=window.webpackJsonp||[]).push([[2],{bdqp:function(g,I,A){"use strict";A.d(I,"e",(function(){return V})),A.d(I,"b",(function(){return m})),A.d(I,"a",(function(){return a})),A.d(I,"d",(function(){return H})),A.d(I,"c",(function(){return n}));var C=A("q1tI"),b=A.n(C),G=A("VIIK"),c=A("khzI"),l=A("Bl7J"),X=A("Yytg"),Z=A("Iv7c"),d=Object(G.a)("div",{label:"Page",target:"eeul0jz0"})("background-image:linear-gradient(#000,var(--color_blur_dark));padding-top:200px;padding-bottom:100px;",c.a.s,"{padding-top:160px;padding-bottom:40px;}/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"),W=Object(G.a)("section",{label:"SpeakerSection",target:"eeul0jz1"})("max-width:var(--layout_width_size_large);margin:0 auto;padding:0 var(--padding_size);/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"),B=Object(G.a)("img",{label:"Image",target:"eeul0jz2"})("width:100%;/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"),x=Object(G.a)("div",{label:"SpeakerWrapper",target:"eeul0jz3"})("display:grid;grid-template-columns:repeat(2,1fr);/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"),u=Object(G.a)("div",{label:"DetailWrapper",target:"eeul0jz4"})("display:flex;flex-direction:column;position:relative;padding-left:65px;",c.a.s,"{padding-left:0px;}/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"),i=Object(G.a)("h1",{label:"FirstNameTitle",target:"eeul0jz5"})("font-size:100px;font-weight:900;font-style:italic;line-height:1.1;color:var(--color_blue);",c.a.s,"{font-size:40px;}/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Wb2x1bWVzL1VzZWZ1bC91eHRocHJvamVjdC91eHRoL3NyYy9jb21wb25lbnRzL1NwZWFrZXJQYWdlLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQTRDZ0MiLCJmaWxlIjoiL1ZvbHVtZXMvVXNlZnVsL3V4dGhwcm9qZWN0L3V4dGgvc3JjL2NvbXBvbmVudHMvU3BlYWtlclBhZ2UuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnXG5pbXBvcnQgc3R5bGVkIGZyb20gJ3JlYWN0LWVtb3Rpb24nXG5pbXBvcnQgbXEgZnJvbSAnLi4vLi4vdXRpbHMvbWVkaWEtcXVlcnknXG5cbmltcG9ydCBMYXlvdXQgZnJvbSAnLi9sYXlvdXQnXG5pbXBvcnQgRm9vdCBmcm9tICcuL0Zvb3QnXG5pbXBvcnQgVGFicyBmcm9tICcuL1RhYnMnXG5cbmNvbnN0IFBhZ2UgPSBzdHlsZWQuZGl2YFxuICBiYWNrZ3JvdW5kLWltYWdlOiBsaW5lYXItZ3JhZGllbnQoIzAwMCwgdmFyKC0tY29sb3JfYmx1cl9kYXJrKSk7XG5cbiAgcGFkZGluZy10b3A6IDIwMHB4O1xuICBwYWRkaW5nLWJvdHRvbTogMTAwcHg7XG4gICR7bXEuc30ge1xuICAgIHBhZGRpbmctdG9wOiAxNjBweDtcbiAgICBwYWRkaW5nLWJvdHRvbTogNDBweDtcbiAgfVxuYFxuXG5jb25zdCBTcGVha2VyU2VjdGlvbiA9IHN0eWxlZC5zZWN0aW9uYFxuICBtYXgtd2lkdGg6IHZhcigtLWxheW91dF93aWR0aF9zaXplX2xhcmdlKTtcbiAgbWFyZ2luOiAwIGF1dG87XG4gIHBhZGRpbmc6IDAgdmFyKC0tcGFkZGluZ19zaXplKTtcbmBcblxuY29uc3QgSW1hZ2UgPSBzdHlsZWQuaW1nYFxuICB3aWR0aDogMTAwJTtcbmBcblxuY29uc3QgU3BlYWtlcldyYXBwZXIgPSBzdHlsZWQuZGl2YFxuICBkaXNwbGF5OiBncmlkO1xuICBncmlkLXRlbXBsYXRlLWNvbHVtbnM6IHJlcGVhdCgyLCAxZnIpO1xuYFxuXG5jb25zdCBEZXRhaWxXcmFwcGVyID0gc3R5bGVkLmRpdmBcbiAgZGlzcGxheTogZmxleDtcbiAgZmxleC1kaXJlY3Rpb246IGNvbHVtbjtcbiAgcG9zaXRpb246IHJlbGF0aXZlO1xuICBwYWRkaW5nLWxlZnQ6IDY1cHg7XG4gICR7bXEuc30ge1xuICAgIHBhZGRpbmctbGVmdDogMHB4O1xuICB9XG5gXG5cbmNvbnN0IEZpcnN0TmFtZVRpdGxlID0gc3R5bGVkLmgxYFxuICBmb250LXNpemU6IDEwMHB4O1xuICBmb250LXdlaWdodDogOTAwO1xuICBmb250LXN0eWxlOiBpdGFsaWM7XG4gIGxpbmUtaGVpZ2h0OiAxLjE7XG4gIGNvbG9yOiB2YXIoLS1jb2xvcl9ibHVlKTtcbiAgJHttcS5zfSB7XG4gICAgZm9udC1zaXplOiA0MHB4O1xuICB9XG5gXG5jb25zdCBMYXN0TmFtZVRpdGxlID0gc3R5bGVkKEZpcnN0TmFtZVRpdGxlKWBcbiAgcGFkZGluZy1sZWZ0OiAyNXB4O1xuYFxuXG5jb25zdCBTdWJ0aXRsZSA9IHN0eWxlZC5oMmBcbiAgZm9udC1zaXplOiAyNHB4O1xuICBmb250LXdlaWdodDogMjAwO1xuICBmb250LXN0eWxlOiBpdGFsaWM7XG4gIGNvbG9yOiB2YXIoLS1jb2xvcl9ncmV5X3N1cGVyX2xpZ2h0KTtcbiAgd2lkdGg6IDU3MHB4O1xuICBtYXJnaW4tdG9wOiAyMHB4O1xuICAke21xLnN9IHtcbiAgICBtYXJnaW4tdG9wOiA1cHg7XG4gICAgZm9udC1zaXplOiAxNnB4O1xuICAgIHdpZHRoOiAxMDAlO1xuICAgIHdvcmQtd3JhcDogYnJlYWstd29yZDtcbiAgICBmb250LXdlaWdodDogMzAwO1xuICAgIGZvbnQtc3R5bGU6IG5vcm1hbDtcbiAgICBib2xkIHtcbiAgICAgIGZvbnQtd2VpZ2h0OiA2MDA7XG4gICAgfVxuICB9XG5gXG5cbmV4cG9ydCBjb25zdCBUb3BpYyA9IHN0eWxlZC5oMWBcbiAgZm9udC1zaXplOiAzNnB4O1xuICBmb250LXdlaWdodDogMjAwO1xuICBmb250LXN0eWxlOiBpdGFsaWM7XG4gIGNvbG9yOiB2YXIoLS1jb2xvcl9ibHVlKTtcbiAgbGluZS1oZWlnaHQ6IDEuMjtcbiAgbWFyZ2luLWJvdHRvbTogNDBweDtcbmBcblxuZXhwb3J0IGNvbnN0IENvbnRlbnQgPSBzdHlsZWQucGBcbiAgZm9udC1zaXplOiAxNHB4O1xuICBmb250LXdlaWdodDogMzAwO1xuICBmb250LXN0eWxlOiBpdGFsaWM7XG4gIGNvbG9yOiB2YXIoLS1jb2xvcl9ncmV5X3N1cGVyX2xpZ2h0KTtcbiAgbWFyZ2luLWJvdHRvbTogMjBweDtcbmBcblxuZXhwb3J0IGNvbnN0IEJsdWVDb250ZW50ID0gc3R5bGVkLnBgXG4gIGZvbnQtc2l6ZTogMTZweDtcbiAgZm9udC13ZWlnaHQ6IDMwMDtcbiAgY29sb3I6IHZhcigtLWNvbG9yX2JsdWUpO1xuICBtYXJnaW4tYm90dG9tOiAxMHB4O1xuYFxuXG5leHBvcnQgY29uc3QgTGlzdFdyYXBwZXIgPSBzdHlsZWQudWxgXG4gIGxpc3Qtc3R5bGU6IGNpcmNsZSBvdXRzaWRlIG5vbmU7XG4gIHBhZGRpbmctbGVmdDogMjBweDtcbmBcblxuZXhwb3J0IGNvbnN0IExpc3RJdGVtID0gc3R5bGVkLmxpYFxuICBmb250LXNpemU6IDE0cHg7XG4gIGZvbnQtd2VpZ2h0OiBub3JtYWw7XG4gIGZvbnQtc3R5bGU6IGl0YWxpYztcbiAgY29sb3I6IHZhcigtLWNvbG9yX2dyZXlfc3VwZXJfbGlnaHQpO1xuICBsaW5lLWhlaWdodDogMjtcbmBcblxuY29uc3QgTmFtZVRleHQgPSBzdHlsZWQuZGl2YFxuICB3aWR0aDogMzM1cHg7XG4gIGZvbnQtc2l6ZTogNDhweDtcbiAgZm9udC13ZWlnaHQ6IDkwMDtcbiAgZm9udC1zdHlsZTogaXRhbGljO1xuICBjb2xvcjogdmFyKC0tY29sb3JfYmx1cl9kYXJrKTtcbiAgcG9zaXRpb246IGFic29sdXRlO1xuICBsaW5lLWhlaWdodDogMS4xO1xuICB0ZXh0LXNoYWRvdzogMCA0cHggNHB4IHJnYmEoMTUsIDI5LCA3OSwgMC4yNSk7XG4gICR7bXEuc30ge1xuICAgIGZvbnQtc2l6ZTogMzJweDtcbiAgICB3aWR0aDogMTUwcHg7XG4gIH1cbmBcblxuY29uc3QgTmFtZVRleHRMZWZ0ID0gc3R5bGVkKE5hbWVUZXh0KWBcbiAgYm90dG9tOiAyMHB4O1xuICBsZWZ0OiAyMHB4O1xuICB0ZXh0LWFsaWduOiBsZWZ0O1xuYFxuXG5jb25zdCBOYW1lVGV4dFJpZ2h0ID0gc3R5bGVkKE5hbWVUZXh0KWBcbiAgYm90dG9tOiAyMHB4O1xuICByaWdodDogMjBweDtcbiAgdGV4dC1hbGlnbjogcmlnaHQ7XG5gXG5cbmNvbnN0IE5hbWVJbWFnZUxlZnQgPSBzdHlsZWQuaW1nYFxuICB3aWR0aDogNjQwcHg7XG4gIGhlaWdodDogMzY1cHg7XG4gIG1hcmdpbi1yaWdodDogMjBweDtcbiAgJHttcS5zfSB7XG4gICAgd2lkdGg6IDI4MHB4O1xuICAgIGhlaWdodDogMTYwcHg7XG4gICAgbWFyZ2luLWxlZnQ6IDBweDtcbiAgfVxuYFxuXG5jb25zdCBOYW1lSW1hZ2VSaWdodCA9IHN0eWxlZC5pbWdgXG4gIHdpZHRoOiA2NDBweDtcbiAgaGVpZ2h0OiAzNjVweDtcbiAgbWFyZ2luLWxlZnQ6IDIwcHg7XG4gICR7bXEuc30ge1xuICAgIHdpZHRoOiAyODBweDtcbiAgICBoZWlnaHQ6IDE2MHB4O1xuICAgIG1hcmdpbi1sZWZ0OiAwcHg7XG4gICAgbWFyZ2luLXRvcDogMjBweDtcbiAgfVxuYFxuXG5jb25zdCBJbWFnZVdyYXBwZXIgPSBzdHlsZWQuZGl2YFxuICB3aWR0aDogNjQwcHg7XG4gIGhlaWdodDogMzY1cHg7XG4gIHBvc2l0aW9uOiByZWxhdGl2ZTtcbiAgJHttcS5zfSB7XG4gICAgd2lkdGg6IDI4MHB4O1xuICAgIGhlaWdodDogMTYwcHg7XG4gIH1cbmBcblxuY29uc3QgTW9iaWxlRnVsbE5hbWVXcmFwcGVyID0gc3R5bGVkLmRpdmBcbiAgJHttcS5zfSB7XG4gICAgcG9zaXRpb246IHJlbGF0aXZlO1xuICB9XG5gXG5cbmNvbnN0IFNtYWxsID0gc3R5bGVkLmRpdmBcbiAgQG1lZGlhIChtaW4td2lkdGg6IDk5MnB4KSB7XG4gICAgZGlzcGxheTogbm9uZTtcbiAgfVxuICAke21xLnN9IHtcbiAgICBkaXNwbGF5OiBmbGV4O1xuICAgIGZsZXgtZGlyZWN0aW9uOiBjb2x1bW47XG4gICAgYWxpZ24taXRlbXM6IGZsZXgtc3RhcnQ7XG4gIH1cbmBcblxuY29uc3QgTGFyZ2UgPSBzdHlsZWQuZGl2YFxuICAke21xLmx9IHtcbiAgICBkaXNwbGF5OiBmbGV4O1xuICB9XG4gICR7bXEuc30ge1xuICAgIGRpc3BsYXk6IG5vbmU7XG4gIH1cbmBcblxuY29uc3QgVGFiVGV4dCA9IHN0eWxlZC5zcGFuYFxuICBmb250LXNpemU6IDIwcHg7XG4gIGZvbnQtd2VpZ2h0OiAzMDA7XG4gIGZvbnQtc3R5bGU6IGl0YWxpYztcbiAgdGV4dC1zaGFkb3c6IDAgNHB4IDRweCByZ2JhKDE1LCAyOSwgNzksIDAuMjUpO1xuICBjb2xvcjogdmFyKC0tY29sb3JfYWxtb3N0X3doaXRlKTtcbmBcbmNvbnN0IExpc3RSb3cgPSBzdHlsZWQudWxgXG4gIGRpc3BsYXk6IGZsZXg7XG4gIHBhZGRpbmc6IDIyLjVweCAwO1xuYFxuY29uc3QgTGlzdCA9IHN0eWxlZC5saWBcbiAgbWFyZ2luOiAwIDE2cHg7XG4gIGN1cnNvcjogcG9pbnRlcjtcbiAgJHtwcm9wcyA9PlxuICAgIHByb3BzLmFjdGl2ZSAmJlxuICAgIGBcbiAgICBib3JkZXItYm90dG9tOiAxcHggc29saWQgI2ZmZjtcbiAgYH07XG5gXG5mdW5jdGlvbiBUYWJUaXRsZXMoeyBvbkNsaWNrLCBjdXJyZW50VGFiIH0pIHtcbiAgcmV0dXJuIDw+PC8+XG59XG5cbmNvbnN0IFNwZWFrZXJQYWdlID0gKHsgaGVhZGVyLCBpbWFnZVBhdGgsIGNvbnRlbnRzIH0pID0+IChcbiAgPExheW91dD5cbiAgICA8UGFnZT5cbiAgICAgIDxTcGVha2VyU2VjdGlvbj5cbiAgICAgICAgPFNwZWFrZXJXcmFwcGVyPlxuICAgICAgICAgIDxJbWFnZSBzcmM9e2ltYWdlUGF0aH0gLz5cbiAgICAgICAgICA8RGV0YWlsV3JhcHBlcj5cbiAgICAgICAgICAgIDxMYXJnZT5cbiAgICAgICAgICAgICAgPE1vYmlsZUZ1bGxOYW1lV3JhcHBlcj5cbiAgICAgICAgICAgICAgICA8Rmlyc3ROYW1lVGl0bGU+e2hlYWRlci5maXJzdE5hbWV9PC9GaXJzdE5hbWVUaXRsZT5cbiAgICAgICAgICAgICAgICA8TGFzdE5hbWVUaXRsZT57aGVhZGVyLmxhc3ROYW1lfTwvTGFzdE5hbWVUaXRsZT5cbiAgICAgICAgICAgICAgPC9Nb2JpbGVGdWxsTmFtZVdyYXBwZXI+XG4gICAgICAgICAgICAgIDxTdWJ0aXRsZT57aGVhZGVyLnN1YnRpdGxlfTwvU3VidGl0bGU+XG4gICAgICAgICAgICA8L0xhcmdlPlxuICAgICAgICAgICAgPFRhYnMgY29udGVudHM9e2NvbnRlbnRzfT5cbiAgICAgICAgICAgICAgeyh7IGN1cnJlbnRUYWIsIGNoYW5nZVRhYiB9KSA9PiAoXG4gICAgICAgICAgICAgICAgPD5cbiAgICAgICAgICAgICAgICAgIDxMaXN0Um93PlxuICAgICAgICAgICAgICAgICAgICB7Y29udGVudHMudGFsayAmJiAoXG4gICAgICAgICAgICAgICAgICAgICAgPExpc3QgYWN0aXZlPXtjdXJyZW50VGFiID09PSAndGFsayd9PlxuICAgICAgICAgICAgICAgICAgICAgICAgPFRhYlRleHQgb25DbGljaz17KCkgPT4gY2hhbmdlVGFiKCd0YWxrJyl9PlxuICAgICAgICAgICAgICAgICAgICAgICAgICBUYWxrXG4gICAgICAgICAgICAgICAgICAgICAgICA8L1RhYlRleHQ+XG4gICAgICAgICAgICAgICAgICAgICAgPC9MaXN0PlxuICAgICAgICAgICAgICAgICAgICApfVxuICAgICAgICAgICAgICAgICAgICAsXG4gICAgICAgICAgICAgICAgICAgIHtjb250ZW50cy53b3Jrc2hvcCAmJiAoXG4gICAgICAgICAgICAgICAgICAgICAgPExpc3QgYWN0aXZlPXtjdXJyZW50VGFiID09PSAnd29ya3Nob3AnfT5cbiAgICAgICAgICAgICAgICAgICAgICAgIDxUYWJUZXh0IG9uQ2xpY2s9eygpID0+IGNoYW5nZVRhYignd29ya3Nob3AnKX0+XG4gICAgICAgICAgICAgICAgICAgICAgICAgIFdvcmtzaG9wXG4gICAgICAgICAgICAgICAgICAgICAgICA8L1RhYlRleHQ+XG4gICAgICAgICAgICAgICAgICAgICAgPC9MaXN0PlxuICAgICAgICAgICAgICAgICAgICApfVxuICAgICAgICAgICAgICAgICAgICA8TGlzdCBhY3RpdmU9e2N1cnJlbnRUYWIgPT09ICdiaW9ncmFwaHknfT5cbiAgICAgICAgICAgICAgICAgICAgICA8VGFiVGV4dCBvbkNsaWNrPXsoKSA9PiBjaGFuZ2VUYWIoJ2Jpb2dyYXBoeScpfT5cbiAgICAgICAgICAgICAgICAgICAgICAgIEJpb2dyYXBoeVxuICAgICAgICAgICAgICAgICAgICAgIDwvVGFiVGV4dD5cbiAgICAgICAgICAgICAgICAgICAgPC9MaXN0PlxuICAgICAgICAgICAgICAgICAgPC9MaXN0Um93PlxuICAgICAgICAgICAgICAgICAge2NvbnRlbnRzW2N1cnJlbnRUYWJdfVxuICAgICAgICAgICAgICAgIDwvPlxuICAgICAgICAgICAgICApfVxuICAgICAgICAgICAgPC9UYWJzPlxuICAgICAgICAgIDwvRGV0YWlsV3JhcHBlcj5cbiAgICAgICAgPC9TcGVha2VyV3JhcHBlcj5cbiAgICAgIDwvU3BlYWtlclNlY3Rpb24+XG4gICAgPC9QYWdlPlxuICAgIDxGb290IC8+XG4gIDwvTGF5b3V0PlxuKVxuXG5leHBvcnQgZGVmYXVsdCBTcGVha2VyUGFnZVxuIl19 */"),t=Object(G.a)(i,{label:"LastNameTitle",target:"eeul0jz6"})("padding-left:25px;/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"),Y=Object(G.a)("h2",{label:"Subtitle",target:"eeul0jz7"})("font-size:24px;font-weight:200;font-style:italic;color:var(--color_grey_super_light);width:570px;margin-top:20px;",c.a.s,"{margin-top:5px;font-size:16px;width:100%;word-wrap:break-word;font-weight:300;font-style:normal;bold{font-weight:600;}}/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"),V=Object(G.a)("h1",{label:"Topic",target:"eeul0jz8"})("font-size:36px;font-weight:200;font-style:italic;color:var(--color_blue);line-height:1.2;margin-bottom:40px;/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"),m=Object(G.a)("p",{label:"Content",target:"eeul0jz9"})("font-size:14px;font-weight:300;font-style:italic;color:var(--color_grey_super_light);margin-bottom:20px;/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"),a=Object(G.a)("p",{label:"BlueContent",target:"eeul0jz10"})("font-size:16px;font-weight:300;color:var(--color_blue);margin-bottom:10px;/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"),H=Object(G.a)("ul",{label:"ListWrapper",target:"eeul0jz11"})("list-style:circle outside none;padding-left:20px;/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"),n=Object(G.a)("li",{label:"ListItem",target:"eeul0jz12"})("font-size:14px;font-weight:normal;font-style:italic;color:var(--color_grey_super_light);line-height:2;/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"),R=(c.a.s,c.a.s,c.a.s,c.a.s,Object(G.a)("div",{label:"MobileFullNameWrapper",target:"eeul0jz19"})(c.a.s,"{position:relative;}/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */")),N=(c.a.s,Object(G.a)("div",{label:"Large",target:"eeul0jz21"})(c.a.l,"{display:flex;}",c.a.s,"{display:none;}/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */")),D=Object(G.a)("span",{label:"TabText",target:"eeul0jz22"})("font-size:20px;font-weight:300;font-style:italic;text-shadow:0 4px 4px rgba(15,29,79,0.25);color:var(--color_almost_white);/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"),p=Object(G.a)("ul",{label:"ListRow",target:"eeul0jz23"})("display:flex;padding:22.5px 0;/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"),h=Object(G.a)("li",{label:"List",target:"eeul0jz24"})("margin:0 16px;cursor:pointer;",(function(g){return g.active&&"\n    border-bottom: 1px solid #fff;\n  "}),";/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */");I.f=function(g){var I=g.header,A=g.imagePath,C=g.contents;return b.a.createElement(l.a,null,b.a.createElement(d,null,b.a.createElement(W,null,b.a.createElement(x,null,b.a.createElement(B,{src:A}),b.a.createElement(u,null,b.a.createElement(N,null,b.a.createElement(R,null,b.a.createElement(i,null,I.firstName),b.a.createElement(t,null,I.lastName)),b.a.createElement(Y,null,I.subtitle)),b.a.createElement(Z.a,{contents:C},(function(g){var I=g.currentTab,A=g.changeTab;return b.a.createElement(b.a.Fragment,null,b.a.createElement(p,null,C.talk&&b.a.createElement(h,{active:"talk"===I},b.a.createElement(D,{onClick:function(){return A("talk")}},"Talk")),",",C.workshop&&b.a.createElement(h,{active:"workshop"===I},b.a.createElement(D,{onClick:function(){return A("workshop")}},"Workshop")),b.a.createElement(h,{active:"biography"===I},b.a.createElement(D,{onClick:function(){return A("biography")}},"Biography"))),C[I])})))))),b.a.createElement(X.a,null))}}}]);
//# sourceMappingURL=7492f435-8aca0810534793e16d5f.js.map